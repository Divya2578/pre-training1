**********PART 125**********
---EOMONTH function
* Introduced in SQL Server 2012
* Returns the last day of the month of the specified date

---Syntax : EOMONTH ( start_date [, month_to_add ] )

--start_date : 
	The date for which to return the last day of the month
--month_to_add :
 	Optional. Number of months to add to the start_date. EOMONTH adds the specified number of months to start_date, and then returns the last day of the month for the resulting date.

Example : Returns last day of the month November
SELECT EOMONTH('11/20/2015') AS LastDay

Example : Returns last day of the month of February from a NON-LEAP year
SELECT EOMONTH('2/20/2015') AS LastDay

Example : Returns last day of the month of February from a LEAP year
SELECT EOMONTH('2/20/2016') AS LastDay

--month_to_add optional parameter can be used to add or subtract a specified number of months from the start_date, 
and then return the last day of the month from the resulting date.

The following example adds 2 months to the start_date and returns the last day of the month from the resulting date
SELECT EOMONTH('3/20/2016', 2) AS LastDay

The following example subtracts 1 month from the start_date and returns the last day of the month from the resulting date
SELECT EOMONTH('3/20/2016', -1) AS LastDay

SELECT Name, DateOfBirth, EOMONTH(DateOfBirth) AS LastDay
FROM tblEmployee

If you want just the last day instead of the full date, you can use DATEPART function

SELECT Name, DateOfBirth, DATEPART(DD,EOMONTH(DateOfBirth)) AS LastDay
FROM tblEmployee


**********PART 126**********
--DATEFROMPARTS function
* Introduced in SQL Server 2012
* Returns a date value for the specified year, month, and day
* The data type of all the 3 parameters (year, month, and day) is integer
* If invalid argument values are specified, the function returns an error
* If any of the arguments are NULL, the function returns null

--Syntax : DATEFROMPARTS ( year, month, day )

Example : All the function arguments have valid values, so DATEFROMPARTS returns the expected date
SELECT DATEFROMPARTS ( 2015, 10, 25) AS [Date]

Example : Invalid value specified for month parameter, so the function returns an error
SELECT DATEFROMPARTS ( 2015, 15, 25) AS [Date]

Example : NULL specified for month parameter, so the function returns NULL.
SELECT DATEFROMPARTS ( 2015, NULL, 25) AS [Date]


--Other new date and time functions introduced in SQL Server 2012
EOMONTH (Discussed in Part 125 of SQL Server tutorial)

DATETIMEFROMPARTS : Returns DateTime
Syntax : DATETIMEFROMPARTS ( year, month, day, hour, minute, seconds, milliseconds )

SMALLDATETIMEFROMPARTS : Returns SmallDateTime
Syntax : SMALLDATETIMEFROMPARTS ( year, month, day, hour, minute )

We will discuss the following functions later 
	TIMEFROMPARTS
	DATETIME2FROMPARTS
	DATETIMEOFFSETFROMPARTS


**********PART 128**********
---DateTime2FromParts function
Introduced in SQL Server 2012
Returns DateTime2
The data type of all the parameters is integer
If invalid argument values are specified, the function returns an error
If any of the required arguments are NULL, the function returns null
If the precision argument is null, the function returns an error

Syntax : DATETIME2FROMPARTS ( year, month, day, hour, minute, seconds, fractions, precision )

Example : All the function arguments have valid values, so DATETIME2FROMPARTS returns DATETIME2 
	value as expected.
SELECT DATETIME2FROMPARTS ( 2015, 11, 15, 20, 55, 55, 0, 0 ) AS [DateTime2]

Example : Invalid value specified for month parameter, so the function returns an error
SELECT DATETIME2FROMPARTS ( 2015, 15, 15, 20, 55, 55, 0, 0 ) AS [DateTime2]

Example : If any of the required arguments are NULL, the function returns null. NULL specified for month parameter, so the function returns NULL.
SELECT DATETIME2FROMPARTS ( 2015, NULL, 15, 20, 55, 55, 0, 0 ) AS [DateTime2]

Example : If the precision argument is null, the function returns an error
SELECT DATETIME2FROMPARTS ( 2015, 15, 15, 20, 55, 55, 0, NULL ) AS [DateTime2]

TIMEFROMPARTS : Returns time value
Syntax : TIMEFROMPARTS ( hour, minute, seconds, fractions, precision )


**********PART 129**********
--DATETIME2 has a bigger date range than DATETIME. Also, DATETIME2 is more accurate than DATETIME. So I would recommend using DATETIME2 over DATETIME when possible. I think the only reason for using DATETIME over DATETIME2 is for backward compatibility.

--DateTime2 Syntax : DATETIME2 [ (fractional seconds precision) ]

--With DateTime2 
* Optional fractional seconds precision can be specified
* The precision scale is from 0 to 7 digits
* The default precision is 7 digits
* For precision 1 and 2, storage size is 6 bytes
* For precision 3 and 4, storage size is 7 bytes
* For precision 5, 6 and 7, storage size is 8 bytes

The following script creates a table variable with 7 DATETIME2 columns with different precision start from 1 through 7
DECLARE @TempTable TABLE
(
    DateTime2Precision1 DATETIME2(1),
    DateTime2Precision2 DATETIME2(2),
    DateTime2Precision3 DATETIME2(3),
    DateTime2Precision4 DATETIME2(4),
    DateTime2Precision5 DATETIME2(5),
    DateTime2Precision6 DATETIME2(6),
    DateTime2Precision7 DATETIME2(7)
)

Insert DateTime value into each column
INSERT INTO @TempTable VALUES
(  
    '2015-10-20 15:09:12.1234567',
    '2015-10-20 15:09:12.1234567',
    '2015-10-20 15:09:12.1234567',
    '2015-10-20 15:09:12.1234567',
    '2015-10-20 15:09:12.1234567',
    '2015-10-20 15:09:12.1234567',
    '2015-10-20 15:09:12.1234567'
)

--The following query retrieves the prcision, the datetime value, and the storage size.
SELECT 'Precision - 1' AS [Precision],
         DateTime2Precision1 AS DateValue,
         DATALENGTH(DateTime2Precision1) AS StorageSize
FROM @TempTable

UNION ALL

SELECT 'Precision - 2',
         DateTime2Precision2,
         DATALENGTH(DateTime2Precision2) AS StorageSize
FROM @TempTable

UNION ALL

SELECT 'Precision - 3',
         DateTime2Precision3,
         DATALENGTH(DateTime2Precision3)
FROM @TempTable

UNION ALL

SELECT 'Precision - 4',
         DateTime2Precision4,
         DATALENGTH(DateTime2Precision4)
FROM @TempTable

UNION ALL

SELECT 'Precision - 5',
         DateTime2Precision5,
         DATALENGTH(DateTime2Precision5)
FROM @TempTable

UNION ALL

SELECT 'Precision - 6',
         DateTime2Precision6,
         DATALENGTH(DateTime2Precision6)
FROM @TempTable

UNION ALL
SELECT 'Precision - 7',
         DateTime2Precision7,
         DATALENGTH(DateTime2Precision7) AS StorageSize
FROM @TempTable


**********PART 130**********
--OFFSET FETCH Clause
* Introduced in SQL Server 2012
* Returns a page of results from the result set
* ORDER BY clause is required

--OFFSET FETCH Syntax : 
SELECT * FROM Table_Name
ORDER BY Column_List
OFFSET Rows_To_Skip ROWS
FETCH NEXT Rows_To_Fetch ROWS ONLY

The following SQL query
1. Sorts the table data by Id column
2. Skips the first 10 rows and
3. Fetches the next 10 rows

SELECT * FROM tblEmployee
ORDER BY Id
OFFSET 5 ROWS
FETCH NEXT 5 ROWS ONLY

--From the front-end application, we would typically send the PAGE NUMBER and the PAGE SIZE to get a page of rows. 
The following stored procedure accepts PAGE NUMBER and the PAGE SIZE as parameters and returns the correct set of rows.

CREATE PROCEDURE spGetRowsByPageNumberAndSize
@PageNumber INT,
@PageSize INT
AS
BEGIN
    SELECT * FROM tblProducts
    ORDER BY Id
    OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY
END

--With PageNumber = 3 and PageSize = 10, the stored procedure returns the correct set of rows

EXECUTE spGetRowsByPageNumberAndSize 3, 10


**********PART 131**********
How to find dependencies using SQL Server Management Studio
Use View Dependencies option in SQL Server Management studio to find the object dependencies

For example : To find the dependencies on the Employees table, right click on it and select View Dependencies from the context menu

Identifying object dependencies in SQL Server

In the Object Dependencies window, depending on the radio button you select, you can find the objects that depend on Employees table 
and the objects on which Employees table depends on.

Identifying object dependencies is important especially when you intend to modify or delete 
an object upon which other objects depend. Otherwise you may risk breaking the functionality.

For example, there are 2 stored procedures (sp_GetEmployees and sp_GetEmployeesandDepartments) that depend on the Employees table. If we are not aware of these dependencies and if we delete the Employees table, both stored procedures will fail with the following error.
Msg 208, Level 16, State 1, Procedure sp_GetEmployees, Line 4
Invalid object name 'Employees'.


**********PART 132**********
---Difference between referencing entity and referenced entity
A dependency is created between two objects when one object appears by name inside a SQL statement stored in another object. 
The object which is appearing inside the SQL expression is known as referenced entity and the object which has the SQL expression
 is known as a referencing entity.

To get the REFERENCING ENTITIES use SYS.DM_SQL_REFERENCING_ENTITIES 
dynamic management function

To get the REFERENCED ENTITIES use SYS.DM_SQL_REFERENCED_ENTITIES
dynamic management function

Now, let us say we have a stored procedure and we want to find the all objects that this stored procedure depends on. 
This can be very achieved using another dynamic management function, sys.dm_sql_referenced_entities. 

--The following query returns all the referenced entities of the stored procedure sp_GetEmployeesandDepartments
Select * from
sys.dm_sql_referenced_entities('dbo.sp_GetEmployeesandDepartments','Object')

Please note : For both these dynamic management functions to work we need to specify the schema name as well. 
Without the schema name you may not get any results.

--Difference between Schema-bound dependency and Non-schema-bound dependency
* Schema-bound dependency :
 Schema-bound dependency prevents referenced objects from being dropped or modified 
as long as the referencing object exists

Example : A view created with SCHEMABINDING, or a table created with foreign key constraint.

* Non-schema-bound dependency :
A non-schema-bound dependency doesn't prevent the referenced object from being dropped or modified.


**********PART 133**********

--There are several ways to find object dependencies in SQL Server
1. View Dependencies feature in SQL Server Management Studio - Part 131
2. SQL Server dynamic management functions - Part 132
     sys.dm_sql_referencing_entities
     sys.dm_sql_referenced_entities
3. sp_depends system stored procedure - This video

--sp_depends
A system stored procedure that returns object dependencies
For example,
      * If you specify a table name as the argument, then the views and procedures that depend on the specified table are displayed
      * If you specify a view or a procedure name as the argument, then the tables and views on which the specified view or procedure depends are displayed.
Syntax :Execute sp_depends 'ObjectName'

The following SQL Script creates a stored procedure
Create procedure sp_GetEmployees
as
Begin
    Select * from tblEmployee
End
Go

--Returns the stored procedure that depends on table Employees
sp_depends 'tblEmployee'

--Returns the name of the table and the respective column names on which the stored procedure sp_GetEmployees depends
sp_depends 'sp_GetEmployees'

Sometime sp_depends does not report dependencies correctly. For example, at the moment we have Employees table 
and a stored procedure sp_GetEmployees. 

--Now drop the table Employees
Drop table Employees

--and then recreate the table again
Create table Employees
(
    Id int primary key identity,
    Name nvarchar(50),
    Gender nvarchar(10)
)
Go

--Now execute the following, to find the objects that depend on Employees table
sp_depends 'Employees'

We know that stored procedure sp_GetEmployees still depends on Employees table. 
But sp_depends does not report this dependency, as the Employees table is dropped and recreated.
Object does not reference any object, and no objects reference it.


**********PART 134**********
--Sequence object
        * Introduced in SQL Server 2012
        * Generates sequence of numeric values in an ascending or descending order

--Syntax :
CREATE SEQUENCE [schema_name . ] sequence_name
    [ AS [ built_in_integer_type | user-defined_integer_type ] ]
    [ START WITH <constant> ]
    [ INCREMENT BY <constant> ]
    [ { MINVALUE [ <constant> ] } | { NO MINVALUE } ]
    [ { MAXVALUE [ <constant> ] } | { NO MAXVALUE } ]
    [ CYCLE | { NO CYCLE } ]
    [ { CACHE [ <constant> ] } | { NO CACHE } ]
    [ ; ]

--Creating an Incrementing Sequence : 
The following code create a Sequence object that starts with 1 and increments by 1

CREATE SEQUENCE [dbo].[SequenceObject] 
AS INT
START WITH 1
INCREMENT BY 1

--Generating the Next Sequence Value : 
Now we have a sequence object created. To generate the sequence value use NEXT VALUE FOR clause

SELECT NEXT VALUE FOR [dbo].[SequenceObject]

Every time you execute the above query the sequence value will be incremented by 1. I executed the above query 5 times, so the current sequence value is 5.

--Retrieving the current sequence value : 
If you want to see what the current Sequence value before generating the next, use sys.sequences

SELECT * FROM sys.sequences WHERE name = 'SequenceObject'

Alter the Sequence object to reset the sequence value : 
ALTER SEQUENCE [SequenceObject] RESTART WITH 1

Select the next sequence value to make sure the value starts from 1
SELECT NEXT VALUE FOR [dbo].[SequenceObject]


**********PART 135**********
Sequence object is similar to the Identity property, in the sense that it generates sequence of numeric values in an ascending order just like the identity property. 
However there are several differences between the 2 which we will discuss in this video.

Identity property is a table column property meaning it is tied to the table, where as the sequence is a user-defined database object and is not tied to any 
specific table meaning it's value can be shared by multiple tables.

Example : Identity property tied to the Id column of the Employees table. 

CREATE TABLE Employees
(
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(50),
    Gender NVARCHAR(10)
)

Example : Sequence object not tied to any specific table

CREATE SEQUENCE [dbo].[SequenceObject]
AS INT
START WITH 1
INCREMENT BY 1

This means the above sequence object can be used with any table.

