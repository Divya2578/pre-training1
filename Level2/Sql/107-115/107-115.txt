*******PART 108**********
The OVER clause combined with PARTITION BY is used to break up data into partitions. 
Syntax : function (...) OVER (PARTITION BY col1, Col2, ...)

COUNT(Gender) OVER (PARTITION BY Gender) will partition the data by GENDER 
i.e there will 2 partitions (Male and Female) and then the COUNT() function is applied over each partition.

Any of the following functions can be used.
This is not the complete list.
COUNT(), AVG(), SUM(), MIN(), MAX(), ROW_NUMBER(), RANK(), DENSE_RANK() etc.

--This can be very easily achieved using a simple GROUP BY query as show below.
SELECT Gender, COUNT(*) AS GenderTotal, AVG(Salary) AS AvgSal,
        MIN(Salary) AS MinSal, MAX(Salary) AS MaxSal
FROM tblEmployee
GROUP BY Gender

--You cannot include non-aggregated columns in the GROUP BY query.
SELECT Name, Salary, Gender, COUNT(*) AS GenderTotal, AVG(Salary) AS AvgSal,
        MIN(Salary) AS MinSal, MAX(Salary) AS MaxSal
FROM tblEmployee
GROUP BY Gender

---
SELECT Name, Salary, Employees.Gender, Genders.GenderTotals,
        Genders.AvgSal, Genders.MinSal, Genders.MaxSal   
FROM Employees
INNER JOIN
(SELECT Gender, COUNT(*) AS GenderTotals,
          AVG(Salary) AS AvgSal,
         MIN(Salary) AS MinSal, MAX(Salary) AS MaxSal
FROM Employees
GROUP BY Gender) AS Genders
ON Genders.Gender = Employees.Gender

--Better way of doing this is by using the OVER clause combined with PARTITION BY
SELECT Name, Salary, Gender,
        COUNT(Gender) OVER(PARTITION BY Gender) AS GenderTotals,
        AVG(Salary) OVER(PARTITION BY Gender) AS AvgSal,
        MIN(Salary) OVER(PARTITION BY Gender) AS MinSal,
        MAX(Salary) OVER(PARTITION BY Gender) AS MaxSal
FROM tblEmployee

**********PART 109*********
---Row_Number function
* Introduced in SQL Server 2005
*Returns the sequential number of a row starting at 1
*ORDER BY clause is required
*PARTITION BY clause is optional

----When the data is partitioned, row number is reset to 1 when the partition changes
Syntax : ROW_NUMBER() OVER (ORDER BY Col1, Col2)

--Row_Number function without PARTITION BY : In this example, data is not partitioned, 
so ROW_NUMBER will provide a consecutive numbering for all the rows in the table based 
on the order of rows imposed by the ORDER BY clause.

SELECT Name, Gender, Salary,
        ROW_NUMBER() OVER (ORDER BY Gender) AS RowNumber
FROM TBLEmployee


--Please note : If ORDER BY clause is not specified you will get the following error
The function 'ROW_NUMBER' must have an OVER clause with ORDER BY

--Row_Number function with PARTITION BY : 
	In this example, data is partitioned by Gender, so ROW_NUMBER will provide a consecutive numbering 
only for the rows with in a parttion. When the partition changes the row number is reset to 1.

SELECT Name, Gender, Salary,
        ROW_NUMBER() OVER (PARTITION BY Gender ORDER BY Gender) AS RowNumber
FROM TBLEmployee

--Use case for Row_Number function : 
	Deleting all duplicate rows except one from a sql server table.

**********PART 110***********
--Rank and Dense_Rank functions
* Introduced in SQL Server 2005
* Returns a rank starting at 1 based on the ordering of rows imposed by the ORDER BY clause
* ORDER BY clause is required
* PARTITION BY clause is optional
* When the data is partitioned, rank is reset to 1 when the partition changes

--- Difference between Rank and Dense_Rank functions
Rank function skips ranking(s) if there is a tie where as Dense_Rank will not.

--For example : If you have 2 rows at rank 1 and you have 5 rows in total.
RANK() returns - 1, 1, 3, 4, 5
DENSE_RANK returns - 1, 1, 2, 3, 4

--Syntax : 
RANK() OVER (ORDER BY Col1, Col2, ...)
DENSE_RANK() OVER (ORDER BY Col1, Col2, ...)

SELECT Name, Salary, Gender,
RANK() OVER (ORDER BY Salary DESC) AS [Rank],
DENSE_RANK() OVER (ORDER BY Salary DESC) AS DenseRank
FROM TBLEmployee


--Use case for RANK and DENSE_RANK functions : 
	Both these functions can be used to find Nth highest salary. 
However, which function to use depends on what you want to do when there is a tie. 
Let me explain with an example.

--If there are 2 employees with the FIRST highest salary, there are 2 different business cases
--If your business case is, not to produce any result for the SECOND highest salary, then use RANK function
--If your business case is to return the next Salary after the tied rows as the SECOND highest Salary, then use DENSE_RANK function
--Since we have 2 Employees with the FIRST highest salary. Rank() function will not return any rows for the SECOND highest Salary.

WITH Result AS
(
    SELECT Salary, RANK() OVER (ORDER BY Salary DESC) AS Salary_Rank
    FROM Employees
)
SELECT TOP 1 Salary FROM Result WHERE Salary_Rank = 2

Though we have 2 Employees with the FIRST highest salary. Dense_Rank() function returns, the next Salary after the tied rows as the SECOND highest Salary

WITH Result AS
(
    SELECT Salary, DENSE_RANK() OVER (ORDER BY Salary DESC) AS Salary_Rank
    FROM Employees
)
SELECT TOP 1 Salary FROM Result WHERE Salary_Rank = 2

--You can also use RANK and DENSE_RANK functions to find the Nth highest Salary among Male or Female employee groups. 
--The following query finds the 3rd highest salary amount paid among the Female employees group

WITH Result AS
(
    SELECT Salary, Gender,
           DENSE_RANK() OVER (PARTITION BY Gender ORDER BY Salary DESC)
           AS Salary_Rank
    FROM Employees
)
SELECT TOP 1 Salary FROM Result WHERE Salary_Rank = 3
AND Gender = 'Female'

********PART 111*******
----Difference between RANK, DENSE_RANK and ROW_NUMBER functions
*ROW_NUMBER :
	 Returns an increasing unique number for each row starting at 1,
 even if there are duplicates.

*RANK :
	 Returns an increasing unique number for each row starting at 1. 
When there are duplicates, same rank is assigned to all the duplicate rows,
 but the next row after the duplicate rows will have the rank it would have been assigned 
if there had been no duplicates. So RANK function skips rankings if there are duplicates.

*DENSE_RANK :
	 Returns an increasing unique number for each row starting at 1.
 When there are duplicates, same rank is assigned to all the duplicate rows
 but the DENSE_RANK function will not skip any ranks.
 This means the next row after the duplicate rows will have the next rank in the sequence.

*********PART 112*********
--SQL Query to compute running total without partitions
SELECT Name, Gender, Salary,
        SUM(Salary) OVER (ORDER BY ID) AS RunningTotal
FROM TBLEmployee

--SQL Query to compute running total with partitions
SELECT Name, Gender, Salary,
        SUM(Salary) OVER (PARTITION BY Gender ORDER BY ID) AS RunningTotal
FROM TBLEmployee

SELECT Name, Gender, Salary,
        SUM(Salary) OVER (ORDER BY Salary) AS RunningTotal
FROM Employees

--What happens if I use order by on Salary column
If you have duplicate values in the Salary column, all the duplicate values will be added to the running total at once.
In the example below notice that we have 5000 repeated 3 times. So 15000 (i.e 5000 + 5000 + 5000) is added to the running total at once. 

********PART 113*******
--NTILE function 
* Introduced in SQL Server 2005
* ORDER BY Clause is required
* PARTITION BY clause is optional
* Distributes the rows into a specified number of groups
* If the number of rows is not divisible by number of groups, you may have groups of two different sizes.
* Larger groups come before smaller groups

--For example

* NTILE(2) of 10 rows divides the rows in 2 Groups (5 in each group)
* NTILE(3) of 10 rows divides the rows in 3 Groups (4 in first group, 3 in 2nd & 3rd group)

--Syntax : NTILE (Number_of_Groups) OVER (ORDER BY Col1, Col2, ...)

--NTILE function without PARTITION BY clause : 
Divides the 10 rows into 3 groups. 4 rows in first group, 3 rows in the 2nd & 3rd group.

SELECT Name, Gender, Salary,
NTILE(3) OVER (ORDER BY Salary) AS [Ntile]
FROM TBLEmployee

--What if the specified number of groups is GREATER THAN the number of rows
NTILE function will try to create as many groups as possible with one row in each group. 

--With 10 rows in the table, NTILE(11) will create 10 groups with 1 row in each group.

SELECT Name, Gender, Salary,
NTILE(11) OVER (ORDER BY Salary) AS [Ntile]
FROM TBLEmployee

--NTILE function with PARTITION BY clause : 
When the data is partitioned, NTILE function creates the specified number of groups with in each partition.

--The following query partitions the data into 2 partitions (Male & Female). NTILE(3) creates 3 groups in each of the partitions.

SELECT Name, Gender, Salary,
NTILE(3) OVER (PARTITION BY GENDER ORDER BY Salary) AS [Ntile]
FROM TBLEmployee

********PART 114********

--Lead and Lag functions 
* Introduced in SQL Server 2012
* Lead function is used to access subsequent row data along with current row data
* Lag function is used to access previous row data along with current row data
* ORDER BY clause is required
* PARTITION BY clause is optional

--Syntax
LEAD(Column_Name, Offset, Default_Value) OVER (ORDER BY Col1, Col2, ...)
LAG(Column_Name, Offset, Default_Value) OVER (ORDER BY Col1, Col2, ...)

--Offset - Number of rows to lead or lag.

--Default_Value - The default value to return if the number of rows to lead or lag
goes beyond first row or last row in a table or partition. 
If default value is not specified NULL is returned.

SELECT Name, Gender, Salary,
        LEAD(Salary, 2, -1) OVER (ORDER BY Salary) AS Lead_2,
        LAG(Salary, 1, -1) OVER (ORDER BY Salary) AS Lag_1
FROM tblEmployee

********PART 115********
--FIRST_VALUE function 
* Introduced in SQL Server 2012
* Retrieves the first value from the specified column
* ORDER BY clause is required
* PARTITION BY clause is optional

--Syntax : FIRST_VALUE(Column_Name) OVER (ORDER BY Col1, Col2, ...)

--FIRST_VALUE function example WITHOUT partitions : 
In the following example, FIRST_VALUE function returns the name of the lowest paid employee from the entire table.

SELECT Name, Gender, Salary,
FIRST_VALUE(Name) OVER (ORDER BY Salary) AS FirstValue
FROM tblEmployee

--FIRST_VALUE function example WITH partitions :
 In the following example, FIRST_VALUE function returns the name of the lowest paid employee from the respective partition.

SELECT Name, Gender, Salary,
FIRST_VALUE(Name) OVER (PARTITION BY Gender ORDER BY Salary) AS FirstValue
FROM tblEmployee



